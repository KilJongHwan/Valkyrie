//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Loading"",
            ""id"": ""c0eb6f5a-4652-4865-933f-8ede87983117"",
            ""actions"": [
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""5584c62a-0d0d-4fc3-bf30-3b67079b186a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""d3085f5e-61ff-4999-8e07-a0c34014e4c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e985ef3d-c7f7-463b-99cc-b4bd08aee320"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a43de0a6-eea9-47ab-9e7e-7f524e3151c8"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Loading
        m_Loading = asset.FindActionMap("Loading", throwIfNotFound: true);
        m_Loading_Press = m_Loading.FindAction("Press", throwIfNotFound: true);
        m_Loading_Touch = m_Loading.FindAction("Touch", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Loading
    private readonly InputActionMap m_Loading;
    private ILoadingActions m_LoadingActionsCallbackInterface;
    private readonly InputAction m_Loading_Press;
    private readonly InputAction m_Loading_Touch;
    public struct LoadingActions
    {
        private @PlayerInput m_Wrapper;
        public LoadingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Press => m_Wrapper.m_Loading_Press;
        public InputAction @Touch => m_Wrapper.m_Loading_Touch;
        public InputActionMap Get() { return m_Wrapper.m_Loading; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LoadingActions set) { return set.Get(); }
        public void SetCallbacks(ILoadingActions instance)
        {
            if (m_Wrapper.m_LoadingActionsCallbackInterface != null)
            {
                @Press.started -= m_Wrapper.m_LoadingActionsCallbackInterface.OnPress;
                @Press.performed -= m_Wrapper.m_LoadingActionsCallbackInterface.OnPress;
                @Press.canceled -= m_Wrapper.m_LoadingActionsCallbackInterface.OnPress;
                @Touch.started -= m_Wrapper.m_LoadingActionsCallbackInterface.OnTouch;
                @Touch.performed -= m_Wrapper.m_LoadingActionsCallbackInterface.OnTouch;
                @Touch.canceled -= m_Wrapper.m_LoadingActionsCallbackInterface.OnTouch;
            }
            m_Wrapper.m_LoadingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Press.started += instance.OnPress;
                @Press.performed += instance.OnPress;
                @Press.canceled += instance.OnPress;
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
            }
        }
    }
    public LoadingActions @Loading => new LoadingActions(this);
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface ILoadingActions
    {
        void OnPress(InputAction.CallbackContext context);
        void OnTouch(InputAction.CallbackContext context);
    }
}
